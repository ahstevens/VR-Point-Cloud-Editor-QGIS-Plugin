# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PointCloudEditor
                                 A QGIS plugin
 Edit LAS point clouds
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-07
        git sha              : $Format:%H$
        copyright            : (C) 2022 by CCOM/JHC
        email                : bmiles@ccom.unh.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QListWidget, QListWidgetItem, QPushButton, QDialogButtonBox

from qgis.core import (
    Qgis,
    QgsApplication,
    QgsProject,
    QgsMapLayer,
    QgsPointCloudLayer,
    QgsCoordinateReferenceSystem,
    QgsMessageLog
)
from qgis.gui import (
    QgisInterface
)

# Initialize Qt resources from file resources.py
#from .resources import *
# Import the code for the dialog
from .point_cloud_editor_dialog import PointCloudEditorDialog
from .edit_point_cloud_task import EditPointCloudTask

import os.path
from typing import Optional, List, Tuple
from functools import partial
from pathlib import Path

loginfo = partial(QgsMessageLog.logMessage, level=Qgis.MessageLevel.Info)
logcrit = partial(QgsMessageLog.logMessage, level=Qgis.MessageLevel.Critical)
logwarn = QgsMessageLog.logMessage

VALID_POINT_CLOUD_EXTENSIONS = {'.las', '.laz'}

class PointCloudEditor:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface: QgisInterface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PointCloudEditor_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Point Cloud Editor')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.dlg: Optional[PointCloudEditorDialog] = None
        self.active_task: Optional[EditPointCloudTask] = None
        self.layers: List[Tuple[QListWidgetItem, QgsMapLayer]] = []
        self.layer_list_widget: Optional[QListWidget] = None



    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PointCloudEditor', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # icon_path = ':/plugins/point_cloud_editor/icon.png'
        current_dir = os.path.dirname(os.path.abspath(__file__))
        icon_path = os.path.join(current_dir, 'icon.png')
        self.add_action(
            icon_path,
            text=self.tr(u'Point Cloud Editor'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Point Cloud Editor'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PointCloudEditorDialog()
            dlg_btn_box: QDialogButtonBox = self.dlg.button_box
            dlg_btn_box.rejected.connect(self.cancel_task)
            edit_layer_button: QPushButton = self.dlg.edit_layer_button
            edit_layer_button.clicked.connect(self.edit_layer)
            self.layer_list_widget = self.dlg.layer_list_widget

        # Get list of layers from QGIS TOC
        # Clear list and reload on each run
        for l in self.layers:
            self.layer_list_widget.takeItem(self.layer_list_widget.row(l[0]))
        self.layers.clear()

        layer: QgsMapLayer
        for layer in QgsProject.instance().mapLayers(validOnly=True).values():
            layer_source: Path = Path(layer.source())
            if layer_source.suffix in VALID_POINT_CLOUD_EXTENSIONS:
                loginfo(f"type: {type(layer)}, Layer: {layer.name()}")
                layer_name: str = layer.name()
                list_item: QListWidgetItem = QListWidgetItem(layer_name, self.layer_list_widget)
                self.layers.append((list_item, layer))

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def find_layer(self, given_item: QListWidgetItem) -> Optional[QgsMapLayer]:
        for l in self.layers:
            if l[0] is given_item:
                return l[1]
        return None

    def cancel_task(self):
        if self.active_task:
            loginfo("Cancelling active task...")
            self.active_task.cancel()
        else:
            loginfo("No active task, so nothing to cancel.")

    def reset_task(self):
        self.active_task = None

    def edit_layer(self):
        if self.active_task is not None:
            logwarn("A task is already running, please wait for it to finish, or cancel it.")
            return

        selected_layers: List[QListWidgetItem] = self.layer_list_widget.selectedItems()
        loginfo(f"Edit Layer button pressed! (num selected: {len(selected_layers)})")
        if len(selected_layers) == 1:
            layer: Optional[QgsMapLayer] = self.find_layer(selected_layers[0])
            if layer is None:
                logwarn(f"Unable to find selected layer!")
            else:
                loginfo(f"Edit Layer button pressed! (item selected: {layer.name()})")
                # Get CRS of layer (or project if layer doesn't have it)
                crs: QgsCoordinateReferenceSystem = layer.crs()
                loginfo(f"select layer crs None? {crs is None}")
                loginfo(f"select layer crs authid is None? {crs.authid() is None}")
                loginfo(f"select layer crs authid==''? {crs.authid() == ''}")
                if crs.authid() == '':
                    # Use project crs
                    crs_authid = QgsProject.instance().crs().authid()
                else:
                    crs_authid = crs.authid()
                if crs_authid == '':
                    self.iface.messageBar().pushMessage(("Neither selected layer nor project have a defined CRS. "
                                                         "Please define one before trying to launch point cloud editor."),
                                                        level=Qgis.Critical)
                    return
                loginfo(f"crs_authid: {crs_authid}")
                # Get source of layer
                source: Path = Path(layer.source())
                loginfo(f"selected layer source: {source}")
                dest: Path = source.with_stem(f"{layer.name()}-edited")
                loginfo(f"selected layer dest: {dest}")

                # Run the task
                self.active_task = EditPointCloudTask("edit_point_cloud", self, source, dest, {'crs': crs_authid})
                loginfo(f"Launching task '{self.active_task}'...")
                QgsApplication.taskManager().addTask(self.active_task)

    def add_result_layer(self, layer_source_path: Path):
        loginfo(f"Adding result layer: {layer_source_path}...")
        self.iface.addPointCloudLayer(str(layer_source_path), layer_source_path.stem, 'pdal')
        loginfo(f"Done adding result layer: {layer_source_path}.")
